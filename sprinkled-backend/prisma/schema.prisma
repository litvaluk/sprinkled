generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int          @id @default(autoincrement())
  username     String       @unique
  email        String       @unique
  password     String
  accessToken  String
  refreshToken String
  teams        Team[]
  pictures     Picture[]
  places       Place[]
  plantEntries PlantEntry[]
  events       Event[]
  reminders    Reminder[]
  devices      Device[]
  adminOf      Team[]       @relation("admins")

  @@map("users")
}

model Device {
  id                           Int         @id @default(autoincrement())
  deviceId                     String      @unique
  reminderNotificationsEnabled Boolean     @default(false)
  eventNotificationsEnabled    Boolean     @default(false)
  pushTokens                   PushToken[]
  users                        User[]

  @@map("devices")
}

model PushToken {
  id       Int    @id @default(autoincrement())
  token    String @unique
  device   Device @relation(fields: [deviceId], references: [id])
  deviceId Int

  @@map("push_tokens")
}

model Team {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  users  User[]
  places Place[]
  admins User[]  @relation("admins")

  @@map("teams")
}

model Place {
  id           Int          @id @default(autoincrement())
  name         String
  team         Team?        @relation(fields: [teamId], references: [id])
  teamId       Int?
  user         User?        @relation(fields: [userId], references: [id])
  userId       Int?
  plantEntries PlantEntry[]

  @@map("places")
}

model Picture {
  id           Int        @id @default(autoincrement())
  url          String
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  plantEntry   PlantEntry @relation(fields: [plantEntryId], references: [id])
  plantEntryId Int

  @@map("pictures")
}

model PlantEntry {
  id               Int        @id @default(autoincrement())
  name             String
  createdAt        DateTime   @default(now())
  creator          User       @relation(fields: [creatorId], references: [id])
  creatorId        Int
  place            Place      @relation(fields: [placeId], references: [id])
  placeId          Int
  plant            Plant      @relation(fields: [plantId], references: [id])
  plantId          Int
  pictures         Picture[]
  events           Event[]
  reminders        Reminder[]
  headerPictureUrl String?

  @@map("plant_entries")
}

model Plant {
  id           Int          @id @default(autoincrement())
  latinName    String
  commonName   String
  pictureUrl   String
  description  String
  difficulty   String
  minTemp      Int
  maxTemp      Int
  water        String
  light        String
  minHeight    Float
  maxHeight    Float
  minSpread    Float
  maxSpread    Float
  plantEntries PlantEntry[]

  @@map("plants")
}

model Event {
  id           Int        @id @default(autoincrement())
  date         DateTime
  user         User?      @relation(fields: [userId], references: [id])
  userId       Int?
  plantEntry   PlantEntry @relation(fields: [plantEntryId], references: [id])
  plantEntryId Int
  action       Action     @relation(fields: [actionId], references: [id])
  actionId     Int
  completed    Boolean    @default(true)
  reminded     Boolean?
  Reminder     Reminder?  @relation(fields: [reminderId], references: [id])
  reminderId   Int?

  @@map("events")
}

model Action {
  id       Int        @id @default(autoincrement())
  type     String
  events   Event[]
  reminder Reminder[]

  @@map("actions")
}

model Reminder {
  id           Int        @id @default(autoincrement())
  date         DateTime
  period       Int
  action       Action     @relation(fields: [actionId], references: [id])
  actionId     Int
  plantEntry   PlantEntry @relation(fields: [plantEntryId], references: [id])
  plantEntryId Int
  creator      User       @relation(fields: [creatorId], references: [id])
  creatorId    Int
  events       Event[]

  @@map("reminders")
}
